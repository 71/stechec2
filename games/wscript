#! /usr/bin/env python

import os
import os.path

from waflib import Utils
from waflib.Errors import ConfigurationError

AVAIL_GAMES = [
    fn for fn in os.listdir('games')
    if os.path.exists(os.path.join('games', fn, 'wscript'))
]


def options(opt):
    def with_games_callback(option, opt, value, parser):
        """Callback which sets a Python list as the option value and
        checks if the arguments are valid in this context."""
        if value in ('*', 'all'):
            setattr(parser.values, option.dest, AVAIL_GAMES)
            return

        vals = value.split(',')
        for val in vals:
            if val not in AVAIL_GAMES:
                raise ConfigurationError("%r is not a valid game" % val)
        setattr(parser.values, option.dest, vals)

    games = ','.join(AVAIL_GAMES) or 'none :( '
    opt.add_option('--with-games',
                   type='string',
                   action='callback',
                   dest='games',
                   callback=with_games_callback,
                   default=[],
                   help='list of games to build (available: %s)' % games)

    for game in AVAIL_GAMES:
        opt.recurse(game)


def configure(conf):
    # Save the games to build in the env
    conf.env.GAMES = conf.options.games

    for game in conf.env.GAMES:
        conf.recurse(game)


def build(ctx):
    TOP_GEN_DIR = ctx.top_dir + '/tools/generator/'
    OUT_GEN_DIR = ctx.out_dir + '/tools/generator/'
    TOP_GAMES_DIR = ctx.top_dir + '/games/'
    OUT_GAMES_DIR = ctx.out_dir + '/games/'

    # Generate games files and then build games
    for game in ctx.env.GAMES:
        ctx.recurse(game)

import jinja2
import os


class Generator:
    def __init__(self, template_namespace, game, out_dir, **kwargs):
        self.game = game
        self.out_dir = out_dir
        template_folder = os.path.join(
            os.path.dirname(__file__), 'templates', template_namespace,
        )
        self.env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(searchpath=template_folder),
            **kwargs
        )
        self.env.globals['stechec2_generated'] = (
            "This file was generated by stechec2-generator. DO NOT EDIT.")
        self.register_filters()

    def template(self, name, out_name=None, **params):
        if out_name is None:
            out_name = name
        tpl = self.env.get_template(name + '.jinja2')
        out = tpl.stream(game=self.game, **params)
        out.dump(os.path.join(self.out_dir, out_name))

    def register_filters(self):
        # TODO: register these automatically
        from .filters.common import camel_case, generic_args, generic_prototype
        self.env.filters["camel_case"] = camel_case
        self.env.filters["generic_args"] = generic_args
        self.env.filters["generic_prototype"] = generic_prototype

        from .filters.c import c_type, c_args, c_prototype
        self.env.filters["c_type"] = c_type
        self.env.filters["c_args"] = c_args
        self.env.filters["c_prototype"] = c_prototype

        from .filters.cxx import cxx_type, cxx_args, cxx_prototype, cxx_comment
        self.env.filters["cxx_type"] = cxx_type
        self.env.filters["cxx_args"] = cxx_args
        self.env.filters["cxx_prototype"] = cxx_prototype
        self.env.filters["cxx_comment"] = cxx_comment

import jinja2
import os


# TODO: refactor
def cxx_type(value: str) -> str:
    if value == "string":
        return "std::string"
    if value.endswith(" array"):
        return "std::vector<{}>".format(cxx_type(value[:-6]))
    return value


def tex_escape(s):
    """Escape common problematic characters in TeX code like _, &."""
    if isinstance(s, jinja2.Markup):
        return s
    if not isinstance(s, str):
        return s

    # For more, see sphinx.util.texescape.
    tex_replacements = {
        '{': r'\{',
        '}': r'\}',
        '[': r'{[}',
        ']': r'{]}',
        '$': r'\$',
        '%': r'\%',
        '&': r'\&',
        '#': r'\#',
        '_': r'\_',
        '~': r'\textasciitilde{}',
        '^': r'\textasciicircum{}',
        '\\': r'\textbackslash{}',
    }
    s = s.translate(str.maketrans(tex_replacements))
    return jinja2.Markup(s)


def make_texdoc(game, out_dir: str) -> None:
    """Generate the LaTeX documentation of a game"""

    template_folder = os.path.join(os.path.dirname(__file__),
                                   'templates', 'apidoc')

    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(searchpath=template_folder),
        block_start_string='<%',
        block_end_string='%>',
        variable_start_string='<<',
        variable_end_string='>>',
        comment_start_string='<#',
        comment_end_string='#>',
        finalize=tex_escape,
        autoescape=True,
    )
    env.filters["cxx_type"] = cxx_type
    env.globals['stechec2_generated'] = (
        "This file was generated by stechec2-generator. DO NOT EDIT.")

    for gen in ["apidoc.tex", "useapi.tex"]:
        env.get_template(gen + ".jinja2").stream(game=game).dump(os.path.join(
            out_dir, gen))
